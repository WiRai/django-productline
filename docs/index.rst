###############################################################
Welcome to django-productline's documentation!
###############################################################

    build feature-oriented productlines for django

django-productline provides a basis and some conventions to develop django web-application product lines.
It follows the *feature-oriented software development* (FOSD) methodology.

Products i.e. specific web applications can be generated by selecting a certain set of features from a pool.

There are many definitions of what a feature really is.
In the context of ``django-productline``, we will use the definition of Apel et al.:

    “A feature is a structure that extends and modifies the structure of a
    given program in order to satisfy a stakeholder’s requirement, to implement
    and encapsulate a design decision, and to offer a configuration option”


More information about FOSD can be found here:


- `An overview article on FOSD <http://www.jot.fm/issues/issue_2009_07/column5.pdf>`_ (pdf)
- `The FOSD community portal <http://fosd.net>`_
- `FOSD on Wikipedia <http://en.wikipedia.org/wiki/FOSD>`_
- Podcast with Sven Apel on Software-Engineering Radio: `Part1 <http://www.se-radio.net/2011/02/episode-172-feature-oriented-software-development-with-sven-apel-pt-1/>`_\ , `Part2 <http://www.se-radio.net/2011/03/episode-173-feature-oriented-software-development-with-sven-apel-pt-1/>`_


****************************
Motivation
****************************

With the concept of apps, Django already provides a pretty good modularization mechanism.
Integrating an app into your project typically means to change some settings and maybe registering some urlpatterns.
Some apps provide an API, so to integrate it properly you will have to write some glue code.

If you are developing multiple django projects, you may be doing this multiple times for different projects in slight variations.
A particular project may also need specific additions and changes scattered across multiple locations in your codebase.
Managing all this by hand e.g. by using branches in your VCS can be quite time-consuming and prone to errors.

FOSD allows to encapsulate these additions and changes in feature modules which form a product line.
Specific products can then be composed by assembling some of these feature modules.
The approach aims at improved reusability and traceability(where is all the code that relates to a specific concern).



************************************
Anatomy of a django web application
************************************

A typical django web application consists of the following:

- web server configuration of some sort
- a set of external services
- databases
- application code
- templates
- javascript code
- CSS


The goal is to be able to automatically compose our entire application i.e. all required artefacts out of a set of feature-modules.
Multiple applications can then share common features and differ in others.


**************************************
Composition Mechanisms
**************************************

To be able to compose the required artefacts for a product, django-productline makes use of multiple composition mechanisms:

- Python code is composed using `featuremonkey <http://github.com/henzk/featuremonkey>`_
- django`s built in composition mechanisms

  - for templates(``django.template.loaders.app_directories.Loader``)
  - and static files (``django.contrib.staticfiles.finders.AppDirectoriesFinder``)

- Templates are composed using `django-overextends <http://github.com/stephenmcd/django-overextends>`_
- Javascript can be composed using `featuremonkey.js <http://github.com/henzk/featuremonkey.js>`_
- CSS is composable by simple concatenation.


Also, it provides some help to manage your products' individual configurations e.g. webserver and database configuration.




*********************
Indices and tables
*********************

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

